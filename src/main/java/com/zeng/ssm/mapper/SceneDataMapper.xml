<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zeng.ssm.dao.SceneDataDao">
    <resultMap id="SimpleResultMap" type="com.zeng.ssm.model.SceneData">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="categoryId" jdbcType="INTEGER" property="categoryId" />
        <result column="categoryRootId" jdbcType="INTEGER" property="categoryRootId" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
        <association property="category" column="categoryId" select="com.zeng.ssm.dao.CategoryDao.selectSimpleByPrimaryKey"/>
    </resultMap>

    <resultMap id="BaseResultMap" type="com.zeng.ssm.model.SceneData">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="categoryId" jdbcType="INTEGER" property="categoryId" />
        <result column="categoryRootId" jdbcType="INTEGER" property="categoryRootId" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="createdAt" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updatedAt" jdbcType="TIMESTAMP" property="updatedAt" />
        <!--当表中设置外键时，如果表中的一条记录单独对应其他表中的一条记录，就用association属性，property表示返回的对象的实例，
        column表示主表的外键字段，select表示对应xml的namespace + 对应xml中的代码片段的id-->
        <association property="category" column="categoryId" select="com.zeng.ssm.dao.CategoryDao.selectSimpleByPrimaryKey"/>
        <!--当表中设置外键时，如果表中的一条记录单独对应其他表中的多条记录，就用collection属性，select表示对应xml的namespace + 对应xml中的代码片段的id,
		column作为select语句的参数传入,如果只传一个参数id可以简写: column="id" -->
        <collection column="id" property="inputFrameList" ofType="com.zeng.ssm.model.InputFrame"
                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.InputFrameDao.selectInputFrameListBySceneDataId"/>
<!--        <collection column="id" property="outputFrameList" ofType="com.zeng.ssm.model.OutputFrame"-->
<!--                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.OutputFrameDao.selectOutputFrameListBySceneDataId"/>-->
<!--        <collection column="id" property="materialDataList" ofType="com.zeng.ssm.model.MaterialData"-->
<!--                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.MaterialDataDao.selectMaterialDataListBySceneDataId"/>-->
<!--        <collection column="id" property="energyDataList" ofType="com.zeng.ssm.model.EnergyData"-->
<!--                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.EnergyDataDao.selectEnergyDataListBySceneDataId"/>-->
<!--        <collection column="id" property="deviceDataList" ofType="com.zeng.ssm.model.DeviceData"-->
<!--                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.DeviceDataDao.selectDeviceDataListBySceneDataId"/>-->
<!--        <collection column="id" property="envLoadDataList" ofType="com.zeng.ssm.model.EnvLoadData"-->
<!--                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.EnvLoadDataDao.selectEnvLoadDataListBySceneDataId"/>-->
<!--&lt;!&ndash;        <collection column="id" property="keyParameterDataList" ofType="com.zeng.ssm.model.KeyParameterData"&ndash;&gt;-->
<!--&lt;!&ndash;                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.KeyParameterDataDao.selectKeyParameterDataListBySceneDataId"/>&ndash;&gt;-->
<!--        <collection column="id" property="outputPartDataList" ofType="com.zeng.ssm.model.OutputPartData"-->
<!--                    javaType="java.util.ArrayList" select="com.zeng.ssm.dao.OutputPartDataDao.selectOutputPartDataListBySceneDataId"/>-->
    </resultMap>

    <insert id="insert" parameterType="com.zeng.ssm.model.SceneData" useGeneratedKeys="true" keyProperty="id" >
        insert into scene_data (`title`, `categoryId`,`categoryRootId`, `description`)
        values (#{title,jdbcType=VARCHAR},#{categoryId,jdbcType=INTEGER},#{categoryRootId,jdbcType=INTEGER},
        #{description,jdbcType=VARCHAR})
    </insert>

    <select id="selectByContent" parameterType="java.lang.String" resultMap="SimpleResultMap">
        SELECT * from `scene_data`
        <if test="content != null">
            where title like '%${content}%'
        </if>
        ;
    </select>

    <select id="selectAll" parameterType="int" resultMap="BaseResultMap">
        SELECT * from `scene_data`
<!--        <if test="categoryRootId != null">
                where category_root_id = #{categoryRootId}
                </if>
        ;-->
    </select>

    <select id="selectSimpleByPrimaryKey" resultMap="SimpleResultMap" parameterType="java.lang.Integer">
        SELECT * from `scene_data` where id = #{pk};
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        SELECT * from `scene_data` where id = #{pk};
    </select>

    <select id="selectListByCategoryId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        SELECT * from `scene_data` where categoryId in
        (select id from `category` where (parentId = #{categoryId} or id =  #{categoryId}));
    </select>

    <update id="updateByPrimaryKey" parameterType="com.zeng.ssm.model.SceneData">
        update scene_data
        set id = #{id,jdbcType=INTEGER},
          categoryId = #{categoryId,jdbcType=INTEGER},
          categoryRootId = #{categoryRootId,jdbcType=INTEGER},
          `title` = #{title,jdbcType=VARCHAR},
          `description` = #{description,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

</mapper>